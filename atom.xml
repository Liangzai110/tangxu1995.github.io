<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>2048</title>
  
  <subtitle>Life is short, I use Python</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-12T06:34:49.923Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python中的网络编程</title>
    <link href="http://yoursite.com/socket/"/>
    <id>http://yoursite.com/socket/</id>
    <published>2019-01-12T05:48:00.000Z</published>
    <updated>2019-01-12T06:34:49.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="socket-模块函数"><a href="#socket-模块函数" class="headerlink" title="socket() 模块函数"></a>socket() 模块函数</h1><p>要创建套接字，必须使用 socket.socket() 函数，它一般的语法如下。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket(socket_family, socket_type, protocol=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p>其中， socket_family 是 AF_UNIX 或 AF_INET， socket_type 是 SOCK_STREAM 或 SOCK_DGRAM 。protocol 通常省略，默认为 0 。</p><p>所以，为了创建 TCP/IP 套接字，可以用下面的方式调用 socket.socket()。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure></p><p>同样，为了创建 UDP/IP 套接字，需要执行以下语句。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">udpSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br></pre></td></tr></table></figure></p><p>因为有很多 socket 模块属性，所以此时可以使用下面的语句来导入 socket 模块。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></p><p>然后可以创建套接字对象，再之后就可以使用套接字对象的方法进行进一步的交互。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpSock = socket(AF_INET, SOCK_STREAM)</span><br></pre></td></tr></table></figure></p><h1 id="UDP-客户端与服务器的创建"><a href="#UDP-客户端与服务器的创建" class="headerlink" title="UDP 客户端与服务器的创建"></a>UDP 客户端与服务器的创建</h1><h2 id="UDP-客户端的创建"><a href="#UDP-客户端的创建" class="headerlink" title="UDP 客户端的创建"></a>UDP 客户端的创建</h2><p>创建一个套接字对象，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">udpSock = socket(AF_INET, SOCK_DGRAM)</span><br></pre></td></tr></table></figure></p><p>然后使用 sendto() 方法可以发送信息，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = input(<span class="string">"请输入你想要发送的信息："</span>)</span><br><span class="line"><span class="comment"># sendto(data, (ip, port))</span></span><br><span class="line">udpSock.sendto(data.encode(<span class="string">'gb2312'</span>), (<span class="string">'172.16.217.129'</span>, <span class="number">8080</span>))</span><br></pre></td></tr></table></figure></p><p>这里使用 mac 向 windows 发送一段信息，由于 windows 软件以 gb2312 解码，因此在 Python 代码中需要把要发送的信息编码成 gb2312，如图。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/python/udp.png" alt=""></p><h2 id="UDP-服务器的创建"><a href="#UDP-服务器的创建" class="headerlink" title="UDP 服务器的创建"></a>UDP 服务器的创建</h2><p>同上先创建一个套接字对象，和创建客户端不同，服务器需要绑定到某一个地址上，只有这样客户端才知道如何给服务器发送信息。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">udpSock = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"><span class="comment"># 绑定到 7788 端口</span></span><br><span class="line">udpSock.bind((<span class="string">""</span>, <span class="number">7788</span>))</span><br><span class="line">udpSock.recvfrom(<span class="number">1024</span>)</span><br><span class="line">content, ip = udpdata</span><br><span class="line">print(ip, <span class="string">":"</span>, content.decode(<span class="string">"gb2312"</span>))</span><br></pre></td></tr></table></figure></p><p>这次使用 windows 向 mac 发送信息，如图。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/python/udp1.png" alt=""></p><hr>]]></content>
    
    <summary type="html">
    
      Python 网络编程使用的主要模块是 socket 模块，在这个模块中可以找到 socket() 函数，该函数用于创建套接字对象。套接字也有自己的方法集，这些方法可以实现基于套接字的网络通信。
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python中的元类(metaclass)</title>
    <link href="http://yoursite.com/metaclass/"/>
    <id>http://yoursite.com/metaclass/</id>
    <published>2019-01-11T11:34:58.000Z</published>
    <updated>2019-01-11T12:05:01.763Z</updated>
    
    <content type="html"><![CDATA[<p>在看一些框架源代码的过程中碰到很多元类的实例，看起来很吃力很晦涩；在看python cookbook中关于元类创建单例模式的那一节有些疑惑。因此花了几天时间研究下元类这个概念。通过学习元类，我对python的面向对象有了更加深入的了解。这里将一篇写的非常好的文章基本照搬过来吧，这是一篇在Stack overflow上很热的帖子，我看 <a href="http://blog.jobbole.com/21351/" target="_blank" rel="noopener">http://blog.jobbole.com/21351/</a> 这篇博客对其进行了翻译。<br><a id="more"></a></p><h1 id="理解类也是对象"><a href="#理解类也是对象" class="headerlink" title="理解类也是对象"></a>理解类也是对象</h1><p>在理解元类之前，需要先掌握 Python 中的类。Python 中类的概念借鉴于 Smalltalk，这显得有些奇特。在大多数编程语言中，类就是一组用来描述如何生成一个对象的代码段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectCreator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">my_object = ObjectCreator()</span><br><span class="line">print(my_object)</span><br><span class="line"><span class="comment"># 输出：&lt;__main__.ObjectCreator object at 0x106cbc588&gt;</span></span><br></pre></td></tr></table></figure><p>但是，Python 中的类还远不止如此。类同样也是一种对象。只要使用关键词 class，Python 解释器在执行的时候就会创建一个对象。下面的代码端：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectCreator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>将在内存中创建一个对象，名字就是 ObjectCreator。这个对象（类）自身拥有创建对象（类实例）的能力，而这就是为什么它是一个类的原因。但是，它的本质仍然是一个对象，于是你可以对它做如下的操作：<br>你可以将它赋值给一个变量，你可以拷贝它，你可以为它增加属性，你可以将它作为函数参数进行传递。<br>下面是示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> ObjectCreator     </span><br><span class="line"><span class="comment"># 你可以打印一个类，因为它其实也是一个对象</span></span><br><span class="line"><span class="comment">#输出：&lt;class '__main__.ObjectCreator'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(o)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> o</span><br><span class="line"></span><br><span class="line">echo(ObjectCreator) <span class="comment"># 你可以将类做为参数传给函数</span></span><br><span class="line"><span class="comment">#输出：&lt;class '__main__.ObjectCreator'&gt;</span></span><br><span class="line"><span class="keyword">print</span> hasattr(ObjectCreator, <span class="string">'new_attribute'</span>)</span><br><span class="line"><span class="comment">#输出：False</span></span><br><span class="line"></span><br><span class="line">ObjectCreator.new_attribute = <span class="string">'foo'</span> <span class="comment">#  你可以为类增加属性</span></span><br><span class="line"><span class="keyword">print</span> hasattr(ObjectCreator, <span class="string">'new_attribute'</span>)</span><br><span class="line"><span class="comment">#输出：True</span></span><br><span class="line"><span class="keyword">print</span> ObjectCreator.new_attribute</span><br><span class="line"><span class="comment">#输出：foo</span></span><br><span class="line"></span><br><span class="line">ObjectCreatorMirror = ObjectCreator <span class="comment"># 你可以将类赋值给一个变量</span></span><br><span class="line"><span class="keyword">print</span> ObjectCreatorMirror()</span><br><span class="line"><span class="comment">#输出：&lt;__main__.ObjectCreator object at 0x108551310&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="动态地创建类"><a href="#动态地创建类" class="headerlink" title="动态地创建类"></a>动态地创建类</h1><h2 id="通过-return-class-动态的构建需要的类"><a href="#通过-return-class-动态的构建需要的类" class="headerlink" title="通过 return class 动态的构建需要的类"></a>通过 return class 动态的构建需要的类</h2><p>因为类也是对象，你可以在运行时动态的创建它们，就像其他任何对象一样。首先，你可以在函数中创建类，使用 class 关键字即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose_class</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">'foo'</span>:</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> Foo <span class="comment"># 返回的是类，不是类的实例</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Bar</span><span class="params">(object)</span>:</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> Bar</span><br><span class="line">MyClass = choose_class(<span class="string">'foo'</span>)</span><br><span class="line"></span><br><span class="line">print(MyClass)  <span class="comment"># 函数返回的是类，不是类的实例</span></span><br><span class="line"><span class="comment">#输出：&lt;class '__main__.Foo'&gt;</span></span><br><span class="line"></span><br><span class="line">print(MyClass()) <span class="comment"># 你可以通过这个类创建类实例，也就是对象</span></span><br><span class="line"><span class="comment">#输出：&lt;__main__.Foo object at 0x1085ed950</span></span><br></pre></td></tr></table></figure></p><h2 id="通过-type-函数构造类"><a href="#通过-type-函数构造类" class="headerlink" title="通过 type 函数构造类"></a>通过 type 函数构造类</h2><p>但这还不够动态，因为你仍然需要自己编写整个类的代码。由于类也是对象，所以它们必须是通过什么东西来生成的才对。当你使用 class 关键字时，Python 解释器自动创建这个对象。但就和 Python 中的大多数事情一样，Python 仍然提供给你手动处理的方法。还记得内建函数 type 吗？这个古老但强大的函数能够让你知道一个对象的类型是什么，就像这样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> type(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#输出：&lt;type 'int'&gt;</span></span><br><span class="line"><span class="keyword">print</span> type(<span class="string">"1"</span>)</span><br><span class="line"><span class="comment">#输出：&lt;type 'str'&gt;</span></span><br><span class="line"><span class="keyword">print</span> type(ObjectCreator)</span><br><span class="line"><span class="comment">#输出：&lt;type 'type'&gt;</span></span><br><span class="line"><span class="keyword">print</span> type(ObjectCreator())</span><br><span class="line"><span class="comment">#输出：&lt;class '__main__.ObjectCreator'&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里，type 有一种完全不同的能力，它也能动态的创建类。type 可以接受一个类的描述作为参数，然后返回一个类。（我知道，根据传入参数的不同，同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在 Python 中是为了保持向后兼容性）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在看一些框架源代码的过程中碰到很多元类的实例，看起来很吃力很晦涩；在看python cookbook中关于元类创建单例模式的那一节有些疑惑。因此花了几天时间研究下元类这个概念。通过学习元类，我对python的面向对象有了更加深入的了解。这里将一篇写的非常好的文章基本照搬过来吧，这是一篇在Stack overflow上很热的帖子，我看 &lt;a href=&quot;http://blog.jobbole.com/21351/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.jobbole.com/21351/&lt;/a&gt; 这篇博客对其进行了翻译。&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>bilibili之视频信息爬虫</title>
    <link href="http://yoursite.com/bilibili-videoInfo/"/>
    <id>http://yoursite.com/bilibili-videoInfo/</id>
    <published>2019-01-09T05:36:11.000Z</published>
    <updated>2019-01-09T05:43:00.079Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://hexo-pics.nos-eastchina1.126.net/bilibili/bilibili-logo.png" alt=""></p><hr><p>视频信息同样在打开 F12 开发者工具后被找到了，</p><h1 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h1><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">videoInfo_Spider</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, aid)</span>:</span></span><br><span class="line">        self.video_url = <span class="string">'https://api.bilibili.com/x/web-interface/archive/stat?aid=&#123;&#125;'</span>.format(aid)</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Mobile Safari/537.36'</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_source</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        time.sleep(<span class="number">0.4</span>)</span><br><span class="line">        response = requests.get(url, headers=self.headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.json()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'访问出错'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, items)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> items.get(<span class="string">'data'</span>):</span><br><span class="line">            info = items.get(<span class="string">'data'</span>)</span><br><span class="line">            id = info.get(<span class="string">'aid'</span>)</span><br><span class="line">            view = info.get(<span class="string">'view'</span>)</span><br><span class="line">            danmaku = info.get(<span class="string">'danmaku'</span>)</span><br><span class="line">            reply = info.get(<span class="string">'reply'</span>)</span><br><span class="line">            favorite = info.get(<span class="string">'favorite'</span>)</span><br><span class="line">            coin = info.get(<span class="string">'coin'</span>)</span><br><span class="line">            share = info.get(<span class="string">'share'</span>)</span><br><span class="line">            <span class="keyword">yield</span> &#123;</span><br><span class="line">                <span class="string">'id'</span>: id,</span><br><span class="line">                <span class="string">'观看数'</span>: view,</span><br><span class="line">                <span class="string">'弹幕数'</span>: danmaku,</span><br><span class="line">                <span class="string">'喜欢数'</span>: favorite,</span><br><span class="line">                <span class="string">'回复数'</span>: reply,</span><br><span class="line">                <span class="string">'硬币数'</span>: coin,</span><br><span class="line">                <span class="string">'分享数'</span>: share</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        client = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</span><br><span class="line">        db = client[<span class="string">'BILIBILI'</span>]</span><br><span class="line">        collection = db[<span class="string">'videoInfo'</span>]</span><br><span class="line">        <span class="keyword">if</span> collection.insert(item):</span><br><span class="line">            print(<span class="string">'保存到MongoDB成功'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        html = self.get_source(self.video_url)</span><br><span class="line">        items = self.parse(html)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            print(item)</span><br><span class="line">            self.save_to_mongo(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    time1 = time.time()</span><br><span class="line">    <span class="keyword">for</span> aid <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">40000890</span>):</span><br><span class="line">        spider = videoInfo_Spider(aid)</span><br><span class="line">        spider.run()</span><br><span class="line">    time2 = time.time()</span><br><span class="line">    print(<span class="string">'cost time: %s'</span> % (time2-time1))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      这一篇是针对哔哩哔哩视频网的视频信息进行爬取，分别使用了单线程，多线程，和多进程进行爬虫，来对比使用三个模式下爬虫速率的区别。
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>bilibili之弹幕爬虫</title>
    <link href="http://yoursite.com/bilibili_danmu/"/>
    <id>http://yoursite.com/bilibili_danmu/</id>
    <published>2019-01-08T13:10:13.000Z</published>
    <updated>2019-01-09T05:42:20.170Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://hexo-pics.nos-eastchina1.126.net/bilibili/bilibili-logo.png" alt=""></p><hr><p>按照正常流程，打开网页，然后右键网页源代码，网页中并没有类似弹幕的文字出现，猜想应该是通过某些接口或者其它什么途径传过来的数据。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/bilibili/bilibli1.png" alt=""></p><p>打开 F12 开发者工具，查看 Network 下的请求，看看是不是弹幕隐藏在其中某个文件内，找了好久，竟然没有发现，后来发现其中一个前缀为 list.so?oid=xxxx的链接 在 Preview 模式下不显示数据，将其 url 用浏览器打开后却出现了我想要的弹幕数据。如下图所示。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/bilibili/danmu_list.png" alt=""></p><p><img src="https://hexo-pics.nos-eastchina1.126.net/bilibili/api.png" alt=""></p><p>既然找到了源文件，那爬虫就很好写了。</p><h1 id="下载并分析弹幕-xml-文件"><a href="#下载并分析弹幕-xml-文件" class="headerlink" title="下载并分析弹幕 xml 文件"></a>下载并分析弹幕 xml 文件</h1><p>创建一个爬虫类，然后定义 get_file 方法来请求并下载弹幕文件，然后使用 parse_danmus 方法来分析弹幕，弹幕信息都是 d 标签下，由此得到弹幕信息。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Danmu_Spider</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.danmu_url = <span class="string">'https://api.bilibili.com/x/v1/dm/list.so?oid=57763167'</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Mobile Safari/537.36'</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_file</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        response = requests.get(url, headers=self.headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'danmu.xml'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(response.content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'访问出错'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_danmus</span><span class="params">(self, file)</span>:</span></span><br><span class="line">        selector = etree.parse(file, etree.HTMLParser())</span><br><span class="line">        items = selector.xpath(<span class="string">"//d//text()"</span>)</span><br><span class="line">        <span class="keyword">return</span> items</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.get_file(self.danmu_url)</span><br><span class="line">        danmus = self.parse_danmus(<span class="string">'danmu.xml'</span>)</span><br><span class="line">        print(danmus)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  spider = Danmu_Spider()</span><br><span class="line">  spider.run()</span><br></pre></td></tr></table></figure></p><p><img src="https://hexo-pics.nos-eastchina1.126.net/bilibili/danmu.png" alt=""></p><p>在图中可以看到成功爬取到了弹幕信息，数量为3000，和文章开头视频右边弹幕信息的数量一致，但是我这里将弹幕使用了集合去重，保留了有效弹幕。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/bilibili/danmu_quchong.png" alt=""></p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Danmu_Spider</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.danmu_url = <span class="string">'https://api.bilibili.com/x/v1/dm/list.so?oid=57763167'</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Mobile Safari/537.36'</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_file</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        response = requests.get(url, headers=self.headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'danmu.xml'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(response.content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'访问出错'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_danmus</span><span class="params">(self, file)</span>:</span></span><br><span class="line">        selector = etree.parse(file, etree.HTMLParser())</span><br><span class="line">        items = selector.xpath(<span class="string">"//d//text()"</span>)</span><br><span class="line">        items = set(items)</span><br><span class="line">        <span class="keyword">return</span> items</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.get_file(self.danmu_url)</span><br><span class="line">        danmus = self.parse_danmus(<span class="string">'danmu.xml'</span>)</span><br><span class="line">        print(<span class="string">'弹幕数量: %s'</span>% len(danmus))</span><br><span class="line">        print(danmus)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    spider = Danmu_Spider()</span><br><span class="line">    spider.run()</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      有事没事的时候会去逛逛B站，我比较喜欢科技或者汽车频道，突然就想起来给B站视频的弹幕写一个爬虫，没接触这类的爬虫，借此机会学习一下。^_^
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>flask</title>
    <link href="http://yoursite.com/flask/"/>
    <id>http://yoursite.com/flask/</id>
    <published>2019-01-07T14:04:24.000Z</published>
    <updated>2019-01-07T14:04:24.564Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫IP代理池</title>
    <link href="http://yoursite.com/ipproxy/"/>
    <id>http://yoursite.com/ipproxy/</id>
    <published>2019-01-07T06:46:37.000Z</published>
    <updated>2019-01-07T06:47:19.678Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Scrapy模拟登录豆瓣网初级篇</title>
    <link href="http://yoursite.com/scrapy_login/"/>
    <id>http://yoursite.com/scrapy_login/</id>
    <published>2019-01-03T04:47:38.000Z</published>
    <updated>2019-01-05T08:04:00.958Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://hexo-pics.nos-eastchina1.126.net/scrapy/scrapy-logo.png" alt=""></p><hr><p>在进行模拟登录之前，应该先对网站登录的原理有所了解，首先在 Chrome 浏览器中进行一次实际的登录操作，再来观察浏览器和网站服务器是如何交互的。</p><p>在这里我使用 <a href="https://www.douban.com/" target="_blank" rel="noopener">豆瓣网</a> 作为此次模拟登录的示例。</p><p>首先打开 F12 开发者模式，在登录表单中输入用户名和密码(这里我的验证码是因为我尝试次数过多出现)，点击登录按钮，观察控制台中 Network 下第一条请求，其为一条 post 请求，且参数在图中有所展示，那么如果需要模拟登录，就需要对这些参数进行构造。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/scrapy/douban_form.png" alt=""></p><p><img src="https://hexo-pics.nos-eastchina1.126.net/scrapy/douban_form1.png" alt=""></p><p>登录的核心其实就是向服务器发送含有登录表单数据的 HTTP 请求(通常是 POST)，在 Scrapy 中提供了一个 FormRequest 类(Request的子类)，专门用于构造含有登录表单的请求，FormRequest 的构造器方法有一个 formdata 参数，接收字典形式的表单数据。</p><p>在本篇文章中，我先模拟登录到网站后，跳转至个人中心，然后修改我的个人签名。</p><h1 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h1><p>要构造 post 请求的参数，来看上图参数中 source, redir 和 login 都是固定值，form_email, form_password 分别为用户名和密码，captcha-solution 是图片验证码的字符，captcha-id 就先去网页源代码中寻找，如下图。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/scrapy/captcha-id.png" alt=""></p><p>在这里我将 start_urls 设置为我的个人详情页，模拟登录这里需要重写 start_requests 方法，因为如果不去重写这个方法，那么 scrapy 就会对我的个人详情页直接进行请求。</p><p>FormRequest 的 from_response 方法需传入一个 Response 对象作为第一个参数，该方法会解析 Response 对象所包含的 form 元素，帮助用户创建 FormRequest 对象，并将隐藏 input 中的信息自动填入表单数据。使用这种方法，只需通过 formdata 参数填写账号和密码即可。这里使用 PIL 的 Image 方法将图片展示出来，人工识别并输入到程序中，程序继续进行登录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模拟登录</span></span><br><span class="line">login_url = <span class="string">'https://accounts.douban.com/login'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> Request(self.login_url, callback=self.login)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    print(<span class="string">'-----登录程序-----'</span>)</span><br><span class="line">    captcha_id = response.xpath(<span class="string">".//input[@name='captcha-id']/@value"</span>).get()</span><br><span class="line">    captcha_url = response.xpath(<span class="string">"//*[@id='captcha_image']/@src"</span>).get()</span><br><span class="line">    <span class="keyword">if</span> captcha_url <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        print(<span class="string">'-----登录时无验证码-----'</span>)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'form_email'</span>: <span class="string">'xxxxxx@qq.com'</span>,</span><br><span class="line">            <span class="string">'form_password'</span>: <span class="string">'xxxxxx'</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'-----登录时有验证码-----'</span>)</span><br><span class="line">        print(<span class="string">'-----即将下载验证码-----'</span>)</span><br><span class="line">        <span class="comment"># 使用urllib 的 urlretrieve 直接下载验证码图片到本地</span></span><br><span class="line">        request.urlretrieve(captcha_url, <span class="string">'captcha.png'</span>,)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            image = Image(<span class="string">'captcha.png'</span>)</span><br><span class="line">            image.show()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        captcha_solution = input(<span class="string">"请输入图片中的验证码"</span>)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'form_email'</span>: <span class="string">'xxxxxx@qq.com'</span>,</span><br><span class="line">            <span class="string">'form_password'</span>: <span class="string">'xxxxxx'</span>,</span><br><span class="line">            <span class="string">'captcha-solution'</span>: captcha_solution,</span><br><span class="line">            <span class="string">'captcha-id'</span>: captcha_id,</span><br><span class="line">            <span class="string">'login'</span>: <span class="string">'登录'</span></span><br><span class="line">        &#125;</span><br><span class="line">    print(<span class="string">'-----登录中-----'</span>)</span><br><span class="line">    <span class="keyword">yield</span> FormRequest.from_response(response, formdata=data, callback=self.parse_after_login)</span><br></pre></td></tr></table></figure><p>在 login 函数中，最后的 FormRequest 的回调函数是 parse_after_login 函数，代码如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_after_login</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"xxxxxxx的帐号"</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        print(<span class="string">"-----登录成功-----"</span>)</span><br></pre></td></tr></table></figure><h1 id="修改签名"><a href="#修改签名" class="headerlink" title="修改签名"></a>修改签名</h1><p>在登录成功之后，需要先跳转到我的个人详情页面，再进行修改签名操作。</p><p>先手动修改签名一次，观察浏览器的请求过程，如图所示。点击修改后，浏览器中这条 POST 请求的 formdata 只有两个参数，一个 signature 就是我们正在修改的签名。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/scrapy/sign1.png" alt=""></p><p>另一个是 ck 参数，ck 参数在网页源代码中同样可以找到，如下图。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/scrapy/ck.png" alt=""></p><p>有了修改签名的两个参数，我们就可以构造修改签名的 FormRequest 了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_after_login</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"xxxxxxx的帐号"</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> super().start_requests()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> response.url == <span class="string">'https://www.douban.com/people/xxxxxxx/'</span>:</span><br><span class="line">        print(<span class="string">'-----已经进入个人详情页-----'</span>)</span><br><span class="line">        print(<span class="string">'-----正在修改个人签名-----'</span>)</span><br><span class="line">        ck = response.xpath(<span class="string">"//*[@id='edit_signature']/form/div/input/@value"</span>).get()</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'ck'</span>: ck,</span><br><span class="line">            <span class="string">'signature'</span>: <span class="string">'我是 scrapy 修改的~~'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">yield</span> FormRequest(self.edit_signature_url, formdata=data)</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request, FormRequest</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'login'</span></span><br><span class="line">    allowed_domains = [<span class="string">'douban.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'https://www.douban.com/people/xxxxxx/'</span>]</span><br><span class="line">    edit_signature_url = <span class="string">'https://www.douban.com/j/people/xxxxxx/edit_signature'</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self ,response)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> response.url == <span class="string">'https://www.douban.com/people/xxxxxx/'</span>:</span><br><span class="line">            print(<span class="string">'-----已经进入个人详情页-----'</span>)</span><br><span class="line">            print(<span class="string">'-----正在修改个人签名-----'</span>)</span><br><span class="line">            ck = response.xpath(<span class="string">"//*[@id='edit_signature']/form/div/input/@value"</span>).get()</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">'ck'</span>: ck,</span><br><span class="line">                <span class="string">'signature'</span>: <span class="string">'我是 scrapy 修改的~~'</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">yield</span> FormRequest(self.edit_signature_url, formdata=data, callback=self.success)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">success</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        print(<span class="string">'-----个人签名修改成功-----'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模拟登录</span></span><br><span class="line">    login_url = <span class="string">'https://accounts.douban.com/login'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> Request(self.login_url, callback=self.login)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        print(<span class="string">'-----登录程序-----'</span>)</span><br><span class="line">        captcha_id = response.xpath(<span class="string">".//input[@name='captcha-id']/@value"</span>).get()</span><br><span class="line">        captcha_url = response.xpath(<span class="string">"//*[@id='captcha_image']/@src"</span>).get()</span><br><span class="line">        <span class="keyword">if</span> captcha_url <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            print(<span class="string">'-----登录时无验证码-----'</span>)</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">'form_email'</span>: <span class="string">'xxxxxx@qq.com'</span>,</span><br><span class="line">                <span class="string">'form_password'</span>: <span class="string">'xxxxxx'</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'-----登录时有验证码-----'</span>)</span><br><span class="line">            print(<span class="string">'-----即将下载验证码-----'</span>)</span><br><span class="line">            request.urlretrieve(captcha_url, <span class="string">'captcha.png'</span>,)</span><br><span class="line">            image = Image.open(<span class="string">'captcha.png'</span>)</span><br><span class="line">            image.show()</span><br><span class="line">            captcha_solution = input(<span class="string">"请输入验证码:"</span>)</span><br><span class="line">            <span class="comment"># captcha_solution = self.recognize_captcha('captcha.png')</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">'form_email'</span>: <span class="string">'xxxxxx@qq.com'</span>,</span><br><span class="line">                <span class="string">'form_password'</span>: <span class="string">'xxxxxx'</span>,</span><br><span class="line">                <span class="string">'captcha-solution'</span>: captcha_solution,</span><br><span class="line">                <span class="string">'captcha-id'</span>: captcha_id,</span><br><span class="line">                <span class="string">'login'</span>: <span class="string">'登录'</span></span><br><span class="line">            &#125;</span><br><span class="line">        print(<span class="string">'-----登录中-----'</span>)</span><br><span class="line">        <span class="keyword">yield</span> FormRequest.from_response(response, formdata=data, callback=self.parse_after_login)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_after_login</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"xxxxxx的帐号"</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            print(<span class="string">'-----登录成功-----'</span>)</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> super().start_requests()</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Scrapy 是一个强大的爬虫框架，某些网站只有在用户登录后才能获取到有价值的信息，因此 Scrapy 框架也有模拟登录的能力。此篇来学习在 Scrapy 中模拟登录的方法。
    
    </summary>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Scrapy" scheme="http://yoursite.com/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy模拟登录豆瓣网进阶篇</title>
    <link href="http://yoursite.com/scrapy-login-captcha/"/>
    <id>http://yoursite.com/scrapy-login-captcha/</id>
    <published>2019-01-03T04:47:38.000Z</published>
    <updated>2019-01-05T15:03:09.697Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://hexo-pics.nos-eastchina1.126.net/scrapy/scrapy-logo.png" alt=""></p><hr><p>内容和上一篇大致差不多，重点说一下接入第三方验证码识别平台的问题。</p><p>验证码识别平台我使用的是 <a href="https://www.chaojiying.com/" target="_blank" rel="noopener">超级鹰</a> ，其是全球领先的智能图片分类及识别商家 ，具有安全、准确、高效、稳定、开放的特点，并且拥有强大的技术及校验团队。</p><p>超级鹰的开发文档: <a href="https://www.chaojiying.com/api.html" target="_blank" rel="noopener">API地址</a></p><p>为了方便，这里将 Python 版本的代码贴在下面，以后还用的上。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chaojiying_Client</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password, soft_id)</span>:</span></span><br><span class="line">        self.username = username</span><br><span class="line">password =  password.encode(<span class="string">'utf8'</span>)</span><br><span class="line">        self.password = md5(password).hexdigest()</span><br><span class="line">        self.soft_id = soft_id</span><br><span class="line">        self.base_params = &#123;</span><br><span class="line">            <span class="string">'user'</span>: self.username,</span><br><span class="line">            <span class="string">'pass2'</span>: self.password,</span><br><span class="line">            <span class="string">'softid'</span>: self.soft_id,</span><br><span class="line">        &#125;</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)'</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PostPic</span><span class="params">(self, im, codetype)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        im: 图片字节</span></span><br><span class="line"><span class="string">        codetype: 题目类型 参考 http://www.chaojiying.com/price.html</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'codetype'</span>: codetype,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        files = &#123;<span class="string">'userfile'</span>: (<span class="string">'ccc.jpg'</span>, im)&#125;</span><br><span class="line">        r = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/Processing.php'</span>, data=params, files=files, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReportError</span><span class="params">(self, im_id)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        im_id:报错题目的图片ID</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'id'</span>: im_id,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        r = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/ReportError.php'</span>, data=params, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">chaojiying = Chaojiying_Client(<span class="string">'超级鹰用户名'</span>, <span class="string">'超级鹰用户名的密码'</span>, <span class="string">'96001'</span>)<span class="comment">#用户中心&gt;&gt;软件ID 生成一个替换 96001</span></span><br><span class="line">im = open(<span class="string">'a.jpg'</span>, <span class="string">'rb'</span>).read()<span class="comment">#本地图片文件路径 来替换 a.jpg 有时WIN系统须要//</span></span><br><span class="line"><span class="keyword">print</span> chaojiying.PostPic(im, <span class="number">1902</span>) <span class="comment">#1902 验证码类型  官方网站&gt;&gt;价格体系 3.4+版 print 后要加()</span></span><br></pre></td></tr></table></figure></p><p>只要把开发文档中对应的 soft_id 和 codetype 填上去，将验证码图片保存到本地，就可以使用超级鹰识别验证码了。话不多说，代码如下。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'login'</span></span><br><span class="line">    allowed_domains = [<span class="string">'douban.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'https://www.douban.com/people/xxxxxx/'</span>]</span><br><span class="line">    edit_signature_url = <span class="string">'https://www.douban.com/j/people/xxxxxx/edit_signature'</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self ,response)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> response.url == <span class="string">'https://www.douban.com/people/xxxxxx/'</span>:</span><br><span class="line">            print(<span class="string">'-----已经进入个人详情页-----'</span>)</span><br><span class="line">            print(<span class="string">'-----正在修改个人签名-----'</span>)</span><br><span class="line">            ck = response.xpath(<span class="string">"//*[@id='edit_signature']/form/div/input/@value"</span>).get()</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">'ck'</span>: ck,</span><br><span class="line">                <span class="string">'signature'</span>: <span class="string">'我可以自动识别验证码啦~~'</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">yield</span> FormRequest(self.edit_signature_url, formdata=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模拟登录</span></span><br><span class="line">    login_url = <span class="string">'https://accounts.douban.com/login'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> Request(self.login_url, callback=self.login)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        print(<span class="string">'-----登录程序-----'</span>)</span><br><span class="line">        captcha_id = response.xpath(<span class="string">".//input[@name='captcha-id']/@value"</span>).get()</span><br><span class="line">        captcha_url = response.xpath(<span class="string">"//*[@id='captcha_image']/@src"</span>).get()</span><br><span class="line">        <span class="keyword">if</span> captcha_url <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            print(<span class="string">'-----登录时无验证码-----'</span>)</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">'form_email'</span>: <span class="string">'xxxxxx@qq.com'</span>,</span><br><span class="line">                <span class="string">'form_password'</span>: <span class="string">'xxxxxx'</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'-----登录时有验证码-----'</span>)</span><br><span class="line">            print(<span class="string">'-----即将下载验证码-----'</span>)</span><br><span class="line">            request.urlretrieve(captcha_url, <span class="string">'captcha.png'</span>,)</span><br><span class="line"></span><br><span class="line">            captcha_solution = self.recognize_captcha(<span class="string">'captcha.png'</span>)</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">'form_email'</span>: <span class="string">'xxxxxx@qq.com'</span>,</span><br><span class="line">                <span class="string">'form_password'</span>: <span class="string">'xxxxxx'</span>,</span><br><span class="line">                <span class="string">'captcha-solution'</span>: captcha_solution,</span><br><span class="line">                <span class="string">'captcha-id'</span>: captcha_id,</span><br><span class="line">                <span class="string">'login'</span>: <span class="string">'登录'</span></span><br><span class="line">            &#125;</span><br><span class="line">        print(<span class="string">'-----登录中-----'</span>)</span><br><span class="line">        <span class="keyword">yield</span> FormRequest.from_response(response, formdata=data, callback=self.parse_after_login)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_after_login</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"xxxxxx的帐号"</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> super().start_requests()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recognize_captcha</span><span class="params">(self, im)</span>:</span></span><br><span class="line">        print(<span class="string">'-----正在进行验证码识别-----'</span>)</span><br><span class="line">        username = <span class="string">'xxxxxx'</span></span><br><span class="line">        password = <span class="string">'xxxxxx'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">        password = md5(password).hexdigest()</span><br><span class="line">        soft_id = <span class="string">'898320'</span></span><br><span class="line">        codetype = <span class="string">'1007'</span></span><br><span class="line">        base_params = &#123;</span><br><span class="line">            <span class="string">'user'</span>: username,</span><br><span class="line">            <span class="string">'pass2'</span>: password,</span><br><span class="line">            <span class="string">'softid'</span>: soft_id,</span><br><span class="line">            <span class="string">'codetype'</span>: codetype</span><br><span class="line">        &#125;</span><br><span class="line">        im = open(im, <span class="string">'rb'</span>).read()</span><br><span class="line">        files = &#123;<span class="string">'userfile'</span>: (<span class="string">'ccc.jpg'</span>, im)&#125;</span><br><span class="line">        r = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/Processing.php'</span>, data=params, files=files, headers=self.headers)</span><br><span class="line">        captcha = r.json()[<span class="string">'pic_str'</span>]</span><br><span class="line">        print(<span class="string">'-----验证码识别完毕-----'</span>)</span><br><span class="line">        print(<span class="string">'验证码为：%s'</span> % captcha)</span><br><span class="line">        <span class="keyword">return</span> captcha</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      上一篇文章中使用 Scrapy 模拟登录豆瓣网，并且进行人工识别验证码进行登录，这一篇中我们使用第三方验证码识别平台去自动识别 Scrapy 登录过程中的验证码。
    
    </summary>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Scrapy" scheme="http://yoursite.com/tags/Scrapy/"/>
    
      <category term="验证码" scheme="http://yoursite.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>多进程爬虫</title>
    <link href="http://yoursite.com/bookSpdier2/"/>
    <id>http://yoursite.com/bookSpdier2/</id>
    <published>2018-12-14T08:49:40.000Z</published>
    <updated>2019-01-03T07:26:52.406Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://hexo-pics.nos-eastchina1.126.net/python/python-logo.png" alt=""></p><hr><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://hexo-pics.nos-eastchina1.126.net/python/python-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>多线程爬虫</title>
    <link href="http://yoursite.com/bookSpdier/"/>
    <id>http://yoursite.com/bookSpdier/</id>
    <published>2018-12-14T08:05:54.000Z</published>
    <updated>2019-01-03T07:26:41.404Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://hexo-pics.nos-eastchina1.126.net/python/python-logo.png" alt=""></p><hr><a id="more"></a><p>多线程类似于同时执行多个不同程序，多线程运行有如下优点：</p><ul><li><p>使用线程可以把占据长时间的程序中的任务放到后台去处理。</p></li><li><p>用户界面可以更加吸引人，这样比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度</p></li><li><p>程序的运行速度可能加快</p></li><li><p>在一些等待的任务实现上如用户输入、文件读写和网络收发数据等，线程就比较有用了。在这种情况下我们可以释放一些珍贵的资源如内存占用等等。</p></li></ul><p>Python 提供了多个模块来支持多线程编程，包括 thread、threading 和 Queue 模块等。程序是可以使用 thread 和 threading 模块来创建与管理线程。 thread 模块提供了基本的线程和锁定支持；而 threading 模块提供了更高级别、功能更全面的线程管理。推荐使用更高级别的 threading 模块，而不使用 thread 模块有很多原因：threading 模块更加先进，有更好的线程支持，并且 thread 模块中的一些属性会和 threading 模块有冲突，另一个原因是低级别的 thread 模块拥有的同步原语很少（实际上只有一个），而 threading 模块有很多。再有避免使用 thread 模块的原因是它对于进程何时退出没有控制。当主线程结束时，所有其他线程也都强制结束，不会发出警告或者进行适当的清理。如上所述，至少 threading 模块能够确保重要的子线程在进程退出前结束。</p><p>下面会使用传统单线程和多线程进行网页爬虫。</p><hr><h1 id="单线程爬虫"><a href="#单线程爬虫" class="headerlink" title="单线程爬虫"></a>单线程爬虫</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksSpider</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        self.url = url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_source</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        resp = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> resp.text</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_html</span><span class="params">(self)</span>:</span></span><br><span class="line">        html = self.get_source(self.url)</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">        items = soup.find_all(<span class="string">'li'</span>, class_=<span class="string">'col-xs-6'</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            title = item.find(<span class="string">'h3'</span>).get_text()</span><br><span class="line">            print(title)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.parse_html()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造所有url</span></span><br><span class="line">    base_url = <span class="string">'http://books.toscrape.com/catalogue/page-&#123;&#125;.html'</span></span><br><span class="line">    url_list = [base_url.format(page) <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">        p = BooksSpider(url)</span><br><span class="line">        p.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    main()</span><br><span class="line">    print(<span class="string">'cost time:%s'</span> % (time.time() - start))</span><br></pre></td></tr></table></figure><p><img src="https://hexo-pics.nos-eastchina1.126.net/python/result-one.png" alt=""></p><h1 id="多线程爬虫"><a href="#多线程爬虫" class="headerlink" title="多线程爬虫"></a>多线程爬虫</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksSpider</span><span class="params">(Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url, q)</span>:</span></span><br><span class="line">        super(BooksSpider, self).__init__()</span><br><span class="line">        self.url = url</span><br><span class="line">        self.q = q</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_source</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        resp = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> resp.text</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_html</span><span class="params">(self)</span>:</span></span><br><span class="line">        html = self.get_source(self.url)</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">        items = soup.find_all(<span class="string">'li'</span>, class_=<span class="string">'col-xs-6'</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            title = item.find(<span class="string">'h3'</span>).get_text()</span><br><span class="line">            price = <span class="string">'1'</span></span><br><span class="line">            self.q.put(title)</span><br><span class="line">            <span class="comment"># print(title)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.parse_html()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建队列</span></span><br><span class="line">    q = Queue()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造所有url</span></span><br><span class="line">    base_url = <span class="string">'http://books.toscrape.com/catalogue/page-&#123;&#125;.html'</span></span><br><span class="line">    url_list = [base_url.format(page) <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存线程</span></span><br><span class="line">    Thread_list = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建并启动线程</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">        p = BooksSpider(url, q)</span><br><span class="line">        p.start()</span><br><span class="line">        Thread_list.append(p)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Thread_list:</span><br><span class="line">        i.join()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">        print(q.get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    main()</span><br><span class="line">    print(<span class="string">'cost time:%s'</span> % (time.time() - start))</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://hexo-pics.nos-eastchina1.126.net/python/result-multi.png" alt=""></h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://hexo-pics.nos-eastchina1.126.net/python/python-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>七牛云数据迁移至网易nos</title>
    <link href="http://yoursite.com/qiniu/"/>
    <id>http://yoursite.com/qiniu/</id>
    <published>2018-11-28T05:52:03.000Z</published>
    <updated>2019-01-03T07:52:56.440Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://hexo-pics.nos-eastchina1.126.net/qiniu/qiniulogo.png" alt=""></p><hr><p>哇哇哇，才几天没写博客，今天想去七牛云上传个图片，上传几次都没成功，而且之前的图片也查看不了，发现页面有提示：<code>5402 获取bucket域名失败</code>，才发现七牛云的测试域名被回收了呀，想继续用的话得绑定个已备案的域名，要备案域名还得买个主机，就只用七牛做个图床，太麻烦了。而且之前上传的图片现在无法预览，也无法下载，难受。不过百度后发现可以进行数据迁移，做此记录。</p><h1 id="使用-qshell-将-bucket-文件迁移到新-bucket-中"><a href="#使用-qshell-将-bucket-文件迁移到新-bucket-中" class="headerlink" title="使用 qshell 将 bucket 文件迁移到新 bucket 中"></a>使用 qshell 将 bucket 文件迁移到新 bucket 中</h1><h2 id="安装-qshell-工具。下载地址：qshell-官方文档"><a href="#安装-qshell-工具。下载地址：qshell-官方文档" class="headerlink" title="安装 qshell 工具。下载地址：qshell 官方文档"></a>安装 qshell 工具。下载地址：<a href="http://devtools.qiniu.com/qshell-v2.3.3.zip" target="_blank" rel="noopener">qshell</a> <a href="https://developer.qiniu.com/kodo/tools/1302/qshell" target="_blank" rel="noopener">官方文档</a></h2><p>将下载下来的压缩文件解压到任意目录，将其中的名字为 darwin 的文件重命名为 qshell 并放入 mac 的 /usr/local/bin <a href="https://www.jianshu.com/p/9a6dca7ccfa0" target="_blank" rel="noopener">目录</a>，最后在命令行输入 qshell 。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/qiniu/qshell1.png" alt=""></p><h2 id="密钥设置"><a href="#密钥设置" class="headerlink" title="密钥设置"></a>密钥设置</h2><p>这里需要使用七牛账号中<a href="https://portal.qiniu.com/user/key" target="_blank" rel="noopener">个人密钥管理</a>下的 AccessKey 和 SecretKey 。</p><p>找到这两个值后在命令行中输入如下命令。(其中 ak 和 sk 分别对应 AccessKey 和 SecretKey ， name 为账户名称)<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ qshell account ak sk <span class="built_in">name</span></span><br></pre></td></tr></table></figure></p><p>如果没有报错的话，输入以下命令来显示账号信息。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>qshell account</span><br></pre></td></tr></table></figure></p><h2 id="迁移文件"><a href="#迁移文件" class="headerlink" title="迁移文件"></a>迁移文件</h2><p>使用如下命令进行文件迁移并生成包含文件名的文本文件。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> qshell listbucket &#123; bucket_name &#125; | awk -F<span class="string">"\t"</span> <span class="string">'&#123;print $1&#125;'</span> &gt; <span class="keyword">files</span>.txt</span><br><span class="line"><span class="symbol">$</span> qshell batchcopy &#123; bucket_name &#125; &#123; new_bucket_name &#125; -i <span class="keyword">files</span>.txt</span><br></pre></td></tr></table></figure><h1 id="批量下载文件到本地"><a href="#批量下载文件到本地" class="headerlink" title="批量下载文件到本地"></a>批量下载文件到本地</h1><p>上面只是将旧桶内的文件转移到新的桶内，原本无法预览、下载的文件现在都可以正常操作了，可是里面有很多图片总不能从网页上一张一张下载下来然后再上传到其他的储存空间里吧，因此这里就需要思考如何将图片批量下载到本地磁盘。七牛云的 qshell 工具有 <a href="https://github.com/qiniu/qshell/blob/master/docs/qdownload.md" target="_blank" rel="noopener"><code>qdownload</code></a> 方法能批量下载文件，但是尝试多次均以失败告终，后看到 qshell 的 <a href="https://github.com/qiniu/qshell/blob/master/docs/get.md" target="_blank" rel="noopener"><code>get</code></a> 方法只能每次操作一个文件，如果让电脑代替人工去重复操作这一 get 方法，就可以把每一张图片都下载下来。</p><p>python 脚本代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> linecache</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, total_num):</span><br><span class="line">    result = linecache.getline(<span class="string">'./files.txt'</span>, num).strip()</span><br><span class="line">    print(result)</span><br><span class="line">    os.system(<span class="string">'/usr/local/bin/qshell get test '</span> + result)</span><br></pre></td></tr></table></figure></p><h1 id="上传至网易-nos"><a href="#上传至网易-nos" class="headerlink" title="上传至网易 nos"></a>上传至网易 nos</h1><p><a href="https://c.163yun.com/dashboard#/m/nos/" target="_blank" rel="noopener">网易nos</a> 的注册与创建桶的过程不再过多介绍，需要注意的是在创建储存桶完毕之后要进行两个关键的配置。</p><ul><li><p>存储桶（bucket）访问权限</p></li><li><p>防盗链设置</p></li></ul><p>1、访问权限</p><p>访问权限应设置为公有读。如图中解释：</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/qiniu/rwpro.png" alt=""></p><p>2、防盗链设置</p><p>为了保护自己的免费额度，防止图片被他人盗用，因此需要开启防盗链。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/qiniu/fdl.png" alt=""></p><hr>]]></content>
    
    <summary type="html">
    
      aadsad
    
    </summary>
    
      <category term="日常" scheme="http://yoursite.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>Pycharm</title>
    <link href="http://yoursite.com/Pycharm/"/>
    <id>http://yoursite.com/Pycharm/</id>
    <published>2018-11-26T07:23:13.000Z</published>
    <updated>2019-01-03T07:52:24.707Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://hexo-pics.nos-eastchina1.126.net/pycharm/pycharmlogo.png" alt=""></p><hr><a id="more"></a><h1 id="内存报错-The-IDE-is-running-low-on-memory"><a href="#内存报错-The-IDE-is-running-low-on-memory" class="headerlink" title="内存报错 The IDE is running low on memory"></a>内存报错 The IDE is running low on memory</h1><p>有时候在 mac 和 windows 系统上使用 PyCharm 时，会提醒 The IDE is running low on memory ，然后看了下内存占用，明明内存够，百度后发现是软件本身设置的内存较小。在 mac 系统中，PyCharm 操作如下：</p><p>1.打开 Help -&gt; Find Action</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/pycharm/pyfind.png" alt=""></p><p>2.在搜索框中输入 VM Options , 点击进入第一条结果</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/pycharm/vm_options.jpg" alt=""></p><p>3.将这里的 -Xmx750m 中的 750 改成想设置的内存大小</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/pycharm/vm.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      212
    
    </summary>
    
      <category term="Pycharm" scheme="http://yoursite.com/categories/Pycharm/"/>
    
      <category term="日常" scheme="http://yoursite.com/categories/Pycharm/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="Pycharm" scheme="http://yoursite.com/tags/Pycharm/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫--猫眼加密字符</title>
    <link href="http://yoursite.com/maoyan_encrypt/"/>
    <id>http://yoursite.com/maoyan_encrypt/</id>
    <published>2018-11-12T08:48:11.000Z</published>
    <updated>2019-01-03T07:20:23.548Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://hexo-pics.nos-eastchina1.126.net/maoyan/maoyan-logo.png" alt=""></p><hr><blockquote><p>参考文章: <a href="http://blog.csdn.net/fdipzone/article/details/68166388" target="_blank" rel="noopener">利用自定义web-font实现数据防采集</a></p></blockquote><p>先挂网站：<a href="http://maoyan.com/films/1203" target="_blank" rel="noopener">http://maoyan.com/films/1203</a></p><p>这篇是排名第一的《霸王别姬》电影详情页面，打开 F12 控制台后，去点选其 <code>评分人数</code> 和 <code>累计票房</code> ，可以看到在页面上能正常查看的数字到了控制台上就变成了n多的小框框，如下图，这是怎么回事呢？</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/maoyan/maoyanjiami1.png" alt=""></p><h1 id="查找字体源"><a href="#查找字体源" class="headerlink" title="查找字体源"></a>查找字体源</h1><p>右键查看网页源代码，找到评分人数的位置，我们发现原来这些数字的地方并不是真的小框框，而是一堆看不懂的数字，它们稍微有些规律，都是 &amp;#x 开头的字符，而且一小串字符就代表一个数字，那这是啥意思捏，再来看，其属性是 stonefont 这一类。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/maoyan/maoyanen1.png" alt=""></p><p>在网页源代码中搜索 stonefont ，发现了 @font-face 定义方法。而且还发现，在每次访问刷新页面时，红框中的字体文件地址也会发生改变，因此其加载方式为动态生成字体。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/maoyan/font.png" alt=""></p><h1 id="字体解析"><a href="#字体解析" class="headerlink" title="字体解析"></a>字体解析</h1><p>现在直接访问字体文件网址，将其下载下来，看看其规律，由于 mac 上不能直接打开 woff 文件，后找到工具<a href="http://fontstore.baidu.com/static/editor/index.html" target="_blank" rel="noopener">百度字体编辑器</a>，在网页中直接打开刚下载的 woff 文件，可以看到下图中对应数字的下方的一小串字符，是不是和之前网页中看到的有些相似，区别只是将 uni 换成了 &amp;#x ，然后将所有字符小写，因此可以找到目前这一个字体文件其中的字体规律。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/maoyan/baiduwoff.png" alt=""></p><p>这里用到了 python 的 fontTools 库，使用它来帮我们解析字体。</p><p>安装方法如下：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 <span class="keyword">install</span> fontTools</span><br></pre></td></tr></table></figure></p><p>安装好解析库后，在脚本代码中将我们下载的 woff 文件转换成为 xml 文件，方便我们查看，得到下图结果。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/maoyan/glyf.png" alt=""></p><p>上面是整个数字组，从 name=”uniE6DC” 开始依次对应百度字体编辑器中的数字，到这里，已经得到了一套字体的映射规律，但是每次刷新字体文件都会变，这个问题怎么办呢，接着往下看。</p><p>接下来查看其中一个字符的字形数据。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TTGlyph</span> <span class="attr">name</span>=<span class="string">"uniE6DC"</span> <span class="attr">xMin</span>=<span class="string">"0"</span> <span class="attr">yMin</span>=<span class="string">"-13"</span> <span class="attr">xMax</span>=<span class="string">"511"</span> <span class="attr">yMax</span>=<span class="string">"719"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">contour</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"130"</span> <span class="attr">y</span>=<span class="string">"201"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"145"</span> <span class="attr">y</span>=<span class="string">"126"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"216"</span> <span class="attr">y</span>=<span class="string">"60"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"270"</span> <span class="attr">y</span>=<span class="string">"60"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"332"</span> <span class="attr">y</span>=<span class="string">"60"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"417"</span> <span class="attr">y</span>=<span class="string">"146"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"417"</span> <span class="attr">y</span>=<span class="string">"270"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"378"</span> <span class="attr">y</span>=<span class="string">"309"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"337"</span> <span class="attr">y</span>=<span class="string">"349"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"277"</span> <span class="attr">y</span>=<span class="string">"349"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"251"</span> <span class="attr">y</span>=<span class="string">"349"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"215"</span> <span class="attr">y</span>=<span class="string">"339"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"225"</span> <span class="attr">y</span>=<span class="string">"416"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"239"</span> <span class="attr">y</span>=<span class="string">"415"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"296"</span> <span class="attr">y</span>=<span class="string">"415"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"385"</span> <span class="attr">y</span>=<span class="string">"474"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"385"</span> <span class="attr">y</span>=<span class="string">"535"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"385"</span> <span class="attr">y</span>=<span class="string">"583"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"322"</span> <span class="attr">y</span>=<span class="string">"646"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"268"</span> <span class="attr">y</span>=<span class="string">"646"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"217"</span> <span class="attr">y</span>=<span class="string">"646"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"149"</span> <span class="attr">y</span>=<span class="string">"584"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"139"</span> <span class="attr">y</span>=<span class="string">"518"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"51"</span> <span class="attr">y</span>=<span class="string">"533"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"67"</span> <span class="attr">y</span>=<span class="string">"623"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"124"</span> <span class="attr">y</span>=<span class="string">"670"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"182"</span> <span class="attr">y</span>=<span class="string">"719"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"266"</span> <span class="attr">y</span>=<span class="string">"719"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"324"</span> <span class="attr">y</span>=<span class="string">"719"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"374"</span> <span class="attr">y</span>=<span class="string">"693"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"423"</span> <span class="attr">y</span>=<span class="string">"669"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"476"</span> <span class="attr">y</span>=<span class="string">"581"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"476"</span> <span class="attr">y</span>=<span class="string">"485"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"426"</span> <span class="attr">y</span>=<span class="string">"410"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"377"</span> <span class="attr">y</span>=<span class="string">"388"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"440"</span> <span class="attr">y</span>=<span class="string">"373"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"511"</span> <span class="attr">y</span>=<span class="string">"281"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"511"</span> <span class="attr">y</span>=<span class="string">"211"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"511"</span> <span class="attr">y</span>=<span class="string">"118"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"374"</span> <span class="attr">y</span>=<span class="string">"-13"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"270"</span> <span class="attr">y</span>=<span class="string">"-13"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"175"</span> <span class="attr">y</span>=<span class="string">"-13"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"51"</span> <span class="attr">y</span>=<span class="string">"99"</span> <span class="attr">on</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pt</span> <span class="attr">x</span>=<span class="string">"42"</span> <span class="attr">y</span>=<span class="string">"189"</span> <span class="attr">on</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">contour</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">instructions</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TTGlyph</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面代码中，有 x 和 y，好像就是坐标，这些代码好像就是在描述一个字体的形状。来想想，即便是字体文件刷新了，里面神秘代码 uni<em>**</em> 变了，但是最后映射出的字符形状是不会改变的，因此可以说，只要我们找出一套映射规律，我们用第二套字体文件中的 x 和 y 坐标去和第一套中的 x 和 y 对比，只要是相同的数据，也就是“描述一个字体的形状轨迹”是相同的，那就可以正确解析第二套字体，第三套，第四套。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"></span><br><span class="line">font1 = TTFont(<span class="string">'4e2d0a51ee699f4d82980ae5927f21e12084.woff'</span>)</span><br><span class="line">obj_list1 = font1.getGlyphNames()[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line">uni_list1=font1.getGlyphOrder()[<span class="number">2</span>:]</span><br><span class="line">base_dict = &#123;</span><br><span class="line">    <span class="string">'uniEB10'</span>: <span class="string">'0'</span>,</span><br><span class="line">    <span class="string">'uniF819'</span>: <span class="string">'4'</span>,</span><br><span class="line">    <span class="string">'uniED1E'</span>: <span class="string">'9'</span>,</span><br><span class="line">    <span class="string">'uniF02C'</span>: <span class="string">'2'</span>,</span><br><span class="line">    <span class="string">'uniF284'</span>: <span class="string">'6'</span>,</span><br><span class="line">    <span class="string">'uniE8CD'</span>: <span class="string">'5'</span>,</span><br><span class="line">    <span class="string">'uniF75A'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'uniF18C'</span>: <span class="string">'7'</span>,</span><br><span class="line">    <span class="string">'uniE6DC'</span>: <span class="string">'3'</span>,</span><br><span class="line">    <span class="string">'uniF455'</span>: <span class="string">'8'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">font2=TTFont(<span class="string">'7204f967cd9de2d94a296851532a76de2076.woff'</span>)</span><br><span class="line">obj_list2=font2.getGlyphNames()[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line">uni_list2=font2.getGlyphOrder()[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> uni2 <span class="keyword">in</span> uni_list2:</span><br><span class="line">    obj2 = font2[<span class="string">'glyf'</span>][uni2]</span><br><span class="line">    <span class="keyword">for</span> uni1 <span class="keyword">in</span> uni_list1:</span><br><span class="line">        obj1 = font1[<span class="string">'glyf'</span>][uni1]</span><br><span class="line">        <span class="keyword">if</span> obj1 == obj2:</span><br><span class="line">            print(uni2, base_dict[uni1])</span><br></pre></td></tr></table></figure><h1 id="内容替换"><a href="#内容替换" class="headerlink" title="内容替换"></a>内容替换</h1><p>最难的地方攻破了，就可以对源代码中的字符进行替换工作了。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      在爬虫过程中经常遇到这种情况，很多文字或数字信息在网页中显示得很正常，但是查看源代码时有些字体显示为很奇怪的字符串更甚至字符缺失。猫眼的数据就是如前者，数字信息在网页源代码中显示为某些字符串，写下此篇，以做记录。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP框架--Laravel</title>
    <link href="http://yoursite.com/laravel_admin/"/>
    <id>http://yoursite.com/laravel_admin/</id>
    <published>2018-10-09T16:10:33.000Z</published>
    <updated>2019-01-03T07:31:41.226Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://hexo-pics.nos-eastchina1.126.net/laravel-admin/laravel-logo.png" alt=""></p><hr><p>在公司实习的时候要用到后台管理工具 Laravel-Admin ，公司主要语言是 PHP , 因此先入门 PHP 。  </p><p>Laravel-Admin 是一个帮我们快速建立后台管理的工具。它提供了页面组件和表单元素等功能，而且还有很多附加功能，同时也支持我们去自定义一些插件，非常方便。</p><p>由于之前没有接触过 PHP这门语言, 所以一开始接手项目时先看了看框架的代码，果然看不懂。回头看了看 PHP 的基础语法，再去简单做了一下 Laravel 的 demo ，开始慢慢理解了某些语法。</p><p>下面是我遇到的几个小问题，记录下来以作参考。</p><hr><h1 id="switch状态值"><a href="#switch状态值" class="headerlink" title="switch状态值"></a><code>switch</code>状态值</h1><p>因为 switch 组件默认存入数据库的状态是[ 开-&gt;1, 关-&gt;0 ]，但是由于 0 会影响数据判断的正确性和安全性，因此需要把 0 和 1 的状态改为 1 和 2，由于需要操作的按钮在表格页，也就是 Grid 页，而 Grid 页的操作都是由 Form 页传递过去的，因此只要找到 Form 中对应的 switch 操作数据库的地方就可以修改入库状态值了。经过一层一层的溯源，先找到 Form.php 文件，查看可使用的操作，发现了 SwitchField 关键词，对其进行查找，找到了 SwitchField.php 文件，其中有一段代码是用来写开关入库的状态值的，对此进行修改后通过测试。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $states = [</span><br><span class="line">        <span class="string">'on'</span>  =&gt; [<span class="string">'value'</span> =&gt; <span class="number">1</span>, <span class="string">'text'</span> =&gt; <span class="string">'ON'</span>, <span class="string">'color'</span> =&gt; <span class="string">'primary'</span>],</span><br><span class="line">        <span class="string">'off'</span> =&gt; [<span class="string">'value'</span> =&gt; <span class="number">2</span>, <span class="string">'text'</span> =&gt; <span class="string">'OFF'</span>, <span class="string">'color'</span> =&gt; <span class="string">'default'</span>],</span><br><span class="line">    ];</span><br></pre></td></tr></table></figure><h1 id="switch控制多个页面"><a href="#switch控制多个页面" class="headerlink" title="switch控制多个页面"></a><code>switch</code>控制多个页面</h1><p>有几个相同的表结构，被显示在不同的页面，页面结构完全相同，因此为了节省操作量，需要用一个页面的 swtich 开关去控制多个页面的状态。Google 后发现了<a href="https://github.com/z-song/laravel-admin/issues/375" target="_blank" rel="noopener">解决方案</a>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::boot();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>::saving(<span class="function"><span class="keyword">function</span> <span class="params">($model)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从$model取出数据并进行处理</span></span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      在公司实习的时候要用到后台管理工具 Laravel-Admin ，公司主要语言是 PHP , 因此先入门 PHP 。
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Django</title>
    <link href="http://yoursite.com/django/"/>
    <id>http://yoursite.com/django/</id>
    <published>2018-08-26T13:37:08.000Z</published>
    <updated>2019-01-03T07:26:16.048Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://hexo-pics.nos-eastchina1.126.net/django/django-logo.png" alt=""></p><hr><p>Django 是一个开放源代码的 Web 应用框架，由 Python 写成。采用了 MVC 的框架模式，即模型 M ，视图 V 和控制器 C 。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是 CMS（内容管理系统）软件。并于2005年7月在 BSD 许可证下发布。这套框架是以比利时的吉普赛爵士吉他手 Django Reinhardt 来命名的。(引用自<a href="https://baike.baidu.com/item/django/61531?fr=aladdin" target="_blank" rel="noopener">百度百科</a>)</p>]]></content>
    
    <summary type="html">
    
      Django 是一个开放源代码的 Web 应用框架，由 Python 写成。采用了 MVC 的框架模式，即模型 M ，视图 V 和控制器 C 。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是 CMS（内容管理系统）软件。
    
    </summary>
    
    
      <category term="网页框架" scheme="http://yoursite.com/tags/%E7%BD%91%E9%A1%B5%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Python算法--快速排序</title>
    <link href="http://yoursite.com/quick_sort/"/>
    <id>http://yoursite.com/quick_sort/</id>
    <published>2018-05-22T16:29:26.000Z</published>
    <updated>2019-01-03T07:24:21.079Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://hexo-pics.nos-eastchina1.126.net/sort/quick_sortlogo.jpg" alt=""></p><hr><p>快速排序（Quicksort），又称划分交换排序（partition-exchange sort），通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p><p>步骤为：</p><p>1、从数列中挑出一个元素，称为”基准”（pivot）</p><p>2、重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作</p><p>3、递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序</p><p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p><hr><h1 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h1><p><img src="https://hexo-pics.nos-eastchina1.126.net/sort/quicksort.jpg" alt=""></p><h1 id="快速排序演示"><a href="#快速排序演示" class="headerlink" title="快速排序演示"></a>快速排序演示</h1><p><img src="https://hexo-pics.nos-eastchina1.126.net/sort/quicksort.gif" alt=""></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(alist, start, end)</span>:</span></span><br><span class="line">    <span class="string">'''快速排序'''</span></span><br><span class="line">    <span class="keyword">if</span> start &gt;= end:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid = alist[start]</span><br><span class="line">    low = start</span><br><span class="line">    high = end</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> alist[high] &gt;= mid:</span><br><span class="line">            high -= <span class="number">1</span></span><br><span class="line">        alist[low] = alist[high]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> alist[low] &lt; mid:</span><br><span class="line">            low += <span class="number">1</span></span><br><span class="line">        alist[high] = alist[low]</span><br><span class="line"></span><br><span class="line">    alist[low] = mid</span><br><span class="line"></span><br><span class="line">    quick_sort(alist, start, low<span class="number">-1</span>)</span><br><span class="line">    quick_sort(alist, low+<span class="number">1</span>, end)</span><br><span class="line">    <span class="keyword">return</span> alist</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    alist = [<span class="number">26</span>, <span class="number">54</span>, <span class="number">15</span>, <span class="number">57</span>, <span class="number">6</span>]</span><br><span class="line">    print(alist)</span><br><span class="line">    print(quick_sort(alist, <span class="number">0</span>, len(alist)<span class="number">-1</span>))</span><br></pre></td></tr></table></figure><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><blockquote><p>最优时间复杂度：O(nlogn)</p></blockquote><blockquote><p>最坏时间复杂度：O(n2)</p></blockquote><blockquote><p>稳定性：不稳定</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      快速排序（Quicksort），又称划分交换排序（partition-exchange sort），通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python算法--插入排序</title>
    <link href="http://yoursite.com/insert_sort/"/>
    <id>http://yoursite.com/insert_sort/</id>
    <published>2018-05-22T00:07:20.000Z</published>
    <updated>2019-01-03T07:15:23.268Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://hexo-pics.nos-eastchina1.126.net/sort/insert_sortlogo.jpg" alt=""></p><hr><p>插入排序（英语：Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><hr><h1 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h1><p><img src="https://hexo-pics.nos-eastchina1.126.net/sort/insert.png" alt=""></p><blockquote><p> <img src="https://hexo-pics.nos-eastchina1.126.net/insert-sort/Insertion-sort-example.gif" alt=""></p></blockquote><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    n = len(alist)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> alist[j] &lt; alist[j<span class="number">-1</span>]:</span><br><span class="line">          alist[j], alist[j<span class="number">-1</span>] = alist[j<span class="number">-1</span>], alist[j]</span><br><span class="line">    <span class="keyword">return</span> alist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    alist = [<span class="number">26</span>, <span class="number">54</span>, <span class="number">15</span>, <span class="number">57</span>, <span class="number">6</span>]</span><br><span class="line">    print(alist)</span><br><span class="line">    print(insert_sort(alist))</span><br></pre></td></tr></table></figure><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><blockquote><p>最优时间复杂度：O(n) （升序排列，序列已经处于升序状态）</p></blockquote><blockquote><p>最坏时间复杂度：O(n2)</p></blockquote><blockquote><p>稳定性：稳定</p></blockquote><h1 id="插入排序演示"><a href="#插入排序演示" class="headerlink" title="插入排序演示"></a>插入排序演示</h1><p><img src="https://hexo-pics.nos-eastchina1.126.net/sort/insert.gif" alt=""></p><hr>]]></content>
    
    <summary type="html">
    
      插入排序（英语：Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python算法--选择排序</title>
    <link href="http://yoursite.com/select_sort/"/>
    <id>http://yoursite.com/select_sort/</id>
    <published>2018-05-21T21:58:47.000Z</published>
    <updated>2018-12-05T06:10:01.327Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://hexo-pics.nos-eastchina1.126.net/sort/select_sortlogo.jpg" alt=""></p><hr><a id="more"></a><p>选择排序（ Selection sort ）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><p>选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对n个元素的表进行排序总共进行至多n-1次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。</p><hr><h1 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h1><blockquote><blockquote><blockquote><p><img src="https://hexo-pics.nos-eastchina1.126.net/sort/selectionsort.jpg" alt=""></p></blockquote></blockquote></blockquote><h1 id="选择排序演示"><a href="#选择排序演示" class="headerlink" title="选择排序演示"></a>选择排序演示</h1><p><img src="https://hexo-pics.nos-eastchina1.126.net/sort/selection.gif" alt=""></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    n = len(alist)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, n):</span><br><span class="line">          <span class="keyword">if</span> alist[j] &lt; alist[min_index]:</span><br><span class="line">              min_index = j</span><br><span class="line">        alist[i], alist[min_index] = alist[min_index], alist[i]</span><br><span class="line">    <span class="keyword">return</span> alist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    alist = [<span class="number">26</span>, <span class="number">54</span>, <span class="number">15</span>, <span class="number">57</span>, <span class="number">6</span>]</span><br><span class="line">    print(alist)</span><br><span class="line">    print(selection_sort(alist))</span><br></pre></td></tr></table></figure><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><blockquote><p>最优时间复杂度：O(n2)</p></blockquote><blockquote><p>最坏时间复杂度：O(n2)</p></blockquote><blockquote><p>稳定性：不稳定</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://hexo-pics.nos-eastchina1.126.net/sort/select_sortlogo.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="http://yoursite.com/bubble_sort/"/>
    <id>http://yoursite.com/bubble_sort/</id>
    <published>2018-05-21T16:25:42.000Z</published>
    <updated>2019-01-03T07:27:29.359Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://hexo-pics.nos-eastchina1.126.net/sort/bubble_sortlogo.jpg" alt=""></p><hr><p>冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地遍历要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。遍历数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><p>冒泡排序算法的运作如下：</p><blockquote><p>比较相邻的元素。如果第一个比第二个大（升序），就交换他们两个。</p></blockquote><blockquote><p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</p></blockquote><blockquote><p>针对所有的元素重复以上的步骤，除了最后一个。</p></blockquote><blockquote><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p></blockquote><hr><h1 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h1><p>交换过程图示(第一次)：</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/sort/bubblesort.jpg" alt=""></p><p>那么我们需要进行 n-1 次冒泡过程，每次对应的比较次数如下图所示：</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/sort/compare.bmp" alt=""></p><h1 id="冒泡排序演示"><a href="#冒泡排序演示" class="headerlink" title="冒泡排序演示"></a>冒泡排序演示</h1><p><img src="https://hexo-pics.nos-eastchina1.126.net/sort/bubble.gif" alt=""></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    n = len(alist)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>-j):</span><br><span class="line">            <span class="keyword">if</span> alist[i] &gt; alist[i+<span class="number">1</span>]:</span><br><span class="line">                alist[i], alist[i+<span class="number">1</span>] = alist[i+<span class="number">1</span>], alist[i]</span><br><span class="line">    <span class="keyword">return</span> alist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    alist = [<span class="number">26</span>, <span class="number">54</span>, <span class="number">15</span>, <span class="number">57</span>, <span class="number">6</span>]</span><br><span class="line">    print(alist)</span><br><span class="line">    print(bubble_sort(alist))</span><br></pre></td></tr></table></figure><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><blockquote><p>最优时间复杂度：O(n) （表示遍历一次发现没有任何可以交换的元素，排序结束。）</p></blockquote><blockquote><p>最坏时间复杂度：O(n2)</p></blockquote><blockquote><p>稳定性：稳定</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地遍历要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。遍历数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫--Scrapy爬取简书全站文章</title>
    <link href="http://yoursite.com/jianshu/"/>
    <id>http://yoursite.com/jianshu/</id>
    <published>2018-05-18T07:25:17.000Z</published>
    <updated>2019-01-03T07:30:36.761Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://hexo-pics.nos-eastchina1.126.net/jianshu/jianshu-logo.png" alt=""></p><hr><p>最近学习了 scrapy ，之前刚开始爬虫的时候有接触过这个框架，当时看了下工作原理有点难懂，现在慢慢地接触爬虫多了，回过头来开始了解爬虫框架，现在再来看它的工作流程就明白了很多。</p><p>本篇文章使用 scrapy 来爬取<a href="https://www.jianshu.com/" target="_blank" rel="noopener">简书</a>全站文章。</p><p>scrapy 工程创建与配置步骤(个人习惯)：</p><ol><li>创建 scrapy 工程，创建启动文件 start.py ，修改 settings.py 配置文件</li><li>进入 spider.py 文件开始写爬虫规则</li><li>item.py 中设置存储模板</li><li>写 pipeline 存入数据库</li></ol><hr><h1 id="创建-scrapy-工程"><a href="#创建-scrapy-工程" class="headerlink" title="创建 scrapy 工程"></a>创建 scrapy 工程</h1><p>windows 系统在 scrapy 工程文件根目录：打开命令行工具，输入命令创建工程。<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy startproject <span class="string">[工程名字]</span></span><br></pre></td></tr></table></figure></p><p>cd 到工程文件夹下，创建爬虫文件，默认使用 basic 模板，同样在命令行中。输入<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy genspider <span class="string">[爬虫名字]</span> <span class="string">[爬虫网址]</span></span><br></pre></td></tr></table></figure></p><p>这样就完成了一个 scrapy 工程的创建。但是这里爬取简书全站我使用的是  crawlspider 爬虫，其有可编写的爬虫规则，使用起来比较方便。</p><p>为了方便启动工程，我都会在创建好 scrapy 后再来创建一个启动文件 start.py 。</p><p>修改 settings.py 文件，将其中的遵守 robots.txt 协议关闭，开启 headers 其它配置等需要的时候再去更改。</p><hr><h1 id="进入-spider-py-写爬虫规则"><a href="#进入-spider-py-写爬虫规则" class="headerlink" title="进入 spider.py 写爬虫规则"></a>进入 spider.py 写爬虫规则</h1><p>这次爬取的是简书全站的文章，因此要找所有文章的链接规则，每篇文章阅读到最底部，简书会推荐给我们一些其它文章，几乎每篇文章下面都会有推荐，因此我们从这里入手，查看了源代码，发现了它们的链接形式都大致相同，<a href="https://www.jianshu.com/p/7a4879ef6f8d" target="_blank" rel="noopener">https://www.jianshu.com/p/7a4879ef6f8d</a> ，<a href="https://www.jianshu.com/p/cde1742518c8" target="_blank" rel="noopener">https://www.jianshu.com/p/cde1742518c8</a> ，如图。    </p><p><img src="https://hexo-pics.nos-eastchina1.126.net/jianshu/jianshu3.jpg" alt=""></p><p>可以看到，都是 p 后面接上一大串数字字母的混合字符串，因此可以写出它的规则，使用正则表达式，如下。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r'.+/p/[a-z0-9].+'</span>), callback=<span class="string">'parse_detail'</span>, follow=<span class="keyword">True</span>),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><p>rules 是一个元组，其中，Rule 写的是爬虫的规则；callback 指的是回调函数，也就是当获取到了前面取到的 url 之后，程序该去调用哪一个函数的操作，而这里就是去调用 parse_detail 这个函数； follow 表示跟进，如果其 ==True 表示要继续跟进，也就是我们进入一片文章之后，要继续跟进下一篇文章。</p><p>在进入一篇文章之后，我们要获取到它的标题，发布者，发布时间，还有内容这四个部分。这里使用 xpath 方法来获取。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/jianshu/jianshu1.jpg" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    title = response.xpath(<span class="string">"/html/body/div[1]/div[1]/div[1]/h1/text()"</span>).get()</span><br><span class="line">    pub_name = response.xpath(<span class="string">"/html/body/div[1]/div[1]/div[1]/div[1]/div/span/a/text()"</span>).get()</span><br><span class="line">    release_time = response.xpath(<span class="string">"/html/body/div[1]/div[1]/div[1]/div[1]/div/div/span[1]/text()"</span>).get()</span><br><span class="line">    content = response.xpath(<span class="string">"/html/body/div[1]/div[1]/div[1]/div[2]/div"</span>).get()</span><br></pre></td></tr></table></figure><hr><h1 id="items-py-中设置存储模板"><a href="#items-py-中设置存储模板" class="headerlink" title="items.py 中设置存储模板"></a>items.py 中设置存储模板</h1><p>在上面已经决定了要采集者四个信息，那么在 item.py 中设置好这四项。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JianshuItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    pub_name = scrapy.Field()</span><br><span class="line">    release_time = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br></pre></td></tr></table></figure></p><p>最后在 parse_detail 尾部加入以下代码，再将 item 返回去。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">item = JianshuItem(title=title, pub_name=pub_name, release_time=release_time, content=content)</span><br><span class="line"><span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure></p><hr><h1 id="pipelines-py"><a href="#pipelines-py" class="headerlink" title="pipelines.py"></a>pipelines.py</h1><p>到这里就可以运行一下程序了，看一下是否能正常输出我们采集的信息。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/jianshu/jianshu2.jpg" alt=""></p><p>可以看到这里可以正常爬取数据，接下来需要将其存入数据库。存入数据库需要在 pipelines.py 中编写相应的代码。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JianshuMongoDBPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.DB_URI = <span class="string">'localhost'</span></span><br><span class="line">        self.DB_PORT = <span class="number">27017</span></span><br><span class="line">        self.client = pymongo.MongoClient(self.DB_URI, self.DB_PORT)</span><br><span class="line">        self.db = self.client[<span class="string">'jianshu'</span>]</span><br><span class="line">        self.collection = self.db[<span class="string">'jianshu_spider'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spdier)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> self.collection.insert(dict(item)):</span><br><span class="line">                print(<span class="string">'保存至MongoDB成功'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'保存至MongoDB失败！'</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">            print(error)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></p><p>在 pipelines.py 中写好 MongoDB 部分后，在 settings.py 中将对应的 pipelines 打开。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/jianshu/jianshusettings.jpg" alt=""></p><p>然后重新运行 start.py ，启动爬虫。</p><p><img src="https://hexo-pics.nos-eastchina1.126.net/jianshu/jianshumongo.jpg" alt=""></p><p>启动爬虫后，一直没有遇到反爬措施，运行了大概30分钟， ROBO 3T 管理工具得到的数据有3300条。<del>感觉速度还是慢，有待优化</del>(突然发现在 settings.py 中设置了1s延时….关掉之后快多了。。 )</p><hr>]]></content>
    
    <summary type="html">
    
      最近学习了 scrapy ，之前刚开始爬虫的时候有接触过这个框架，当时看了下工作原理有点难懂，现在慢慢地接触爬虫多了，回过头来开始了解爬虫框架，现在再来看它的工作流程就明白了很多。
    
    </summary>
    
    
  </entry>
  
</feed>
